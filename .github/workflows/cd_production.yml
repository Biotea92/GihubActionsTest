# github repository Actions 페이지에 나타낼 이름
name: Java CD with Gradle

# event trigger
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: my-instagram-deploy-bucket
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    ## ubuntu version
    runs-on: ubuntu-latest
    environment: production


    steps:
      ## gradle cashing -> 나중에 빌드시간을 줄이고 싶을때 적용해보자

      ## checkout
      - name: Checkout
        uses: actions/checkout@v3

      ## jdk17 setting
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## application properties 환경별로 설정 하기
      # main브랜치인 경우 application.properties파일 제작한다.
      - name: Main Branch Make application-prd.properties
        run: |
          cd ./src/main/resources \
          touch ./application-prd.properties \
          echo "${{ secrets.PROPERTIES_PRD }}" > ./application-prd.properties
        shell: bash

      ## Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      # 테스트 진행
      - name: main Test
        if: contains(github.ref, 'main')
        run: ./gradlew clean test
        shell: bash

      # 프로젝트 테스트 진행없이 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      # 운영서버에 배포

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # S3 Bucket으로 copy
#      - name: Deliver to AWS S3
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          aws s3 cp \
#          --region ap-northeast-2 \
#          --recursive \
##          --acl private \
#          ./springboot-intro-build.zip s3://my-instagram-deploy-bucket/